// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    @@index([name])
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String?
    providerAccountId String?
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    passwordHash      String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String     @id @default(cuid())
    firstName     String?
    lastName      String?
    username      String?    @unique
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    isAdmin       Boolean    @default(false)
    accounts      Account[]
    sessions      Session[]
    courses       Course[]
    StudySet      StudySet[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Course {
    id          String     @id @default(cuid())
    name        String
    description String
    level       Int
    type        String
    isTemplate  Boolean    @default(false)
    isPublished Boolean    @default(false)
    User        User?      @relation(fields: [userId], references: [id])
    userId      String?
    questions   Question[]
}

model Question {
    id                 String   @id @default(cuid())
    templateQuestionId String?
    level              Int
    content            String
    score              Float
    audioURL           String?
    isTemplate         Boolean  @default(false)
    Course             Course?  @relation(fields: [courseId], references: [id])
    courseId           String?
    index              Int?
    type               String   @default("singleChoice")
    Answer             Answer[]
}

model Answer {
    id         String   @id @default(cuid())
    content    String
    isCorrect  Boolean
    Question   Question @relation(fields: [questionId], references: [id])
    questionId String
    index      Int?
}

model StudySet {
    id          String      @id @default(cuid())
    title       String
    description String
    isPublic    Boolean     @default(false)
    createdAt   DateTime    @default(now())
    User        User        @relation(fields: [userId], references: [id])
    userId      String
    StudyCard   StudyCard[]
}

model StudyCard {
    id         String   @id @default(cuid())
    term       String
    definition String
    imageURL   String?
    index      Int?
    StudySet   StudySet @relation(fields: [studySetId], references: [id])
    studySetId String
}
